https://leetcode.com/problems/reverse-linked-list-ii/description/?envType=study-plan-v2&envId=top-interview-150
---------------------------------------------------------------------------------------------------------
Problem :-

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?
-------------------------------------------------------------------------------------------------------------------------------

Solution :-

class Solution {
  public ListNode reverseBetween(ListNode head, int m, int n) {
    // Check if head is null or m is equal to n
    if (head == null || m == n)
      return head;

    // Create a dummy node and set it as the previous node
    ListNode dummy = new ListNode(0, head);
    ListNode prev = dummy;

    // Move prev to the node before the sublist [m, n]
    for (int i = 0; i < m - 1; ++i)
      prev = prev.next;

    // Set tail as the current prev.next, which will be the tail of the sublist [m, n]
    ListNode tail = prev.next;

    // Reverse the sublist [m, n] one by one
    for (int i = 0; i < n - m; ++i) {
      // Cache the next node after tail
      ListNode cache = tail.next;
      
      // Adjust pointers to reverse the sublist
      tail.next = cache.next;
      cache.next = prev.next;
      prev.next = cache;
    }

    // Return the modified linked list starting from the dummy node
    return dummy.next;
  }
}

