https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/?envType=study-plan-v2&envId=top-interview-150

-----------------------------------------------------------------------------------------------------------------------------
Problem:-

Given the head of a linked list, remove the nth node from the end of the list and return its head.

 Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?
--------------------------------------------------------------------------------------------------------------------------------------

Solution :-


class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Create a dummy node to simplify edge cases
        ListNode dummy = new ListNode(0, head);
        ListNode first = dummy;
        ListNode second = dummy;

        // Move the second pointer to the (n + 1)-th node from the beginning
        for (int i = 0; i <= n; i++) {
            if (first != null) {
                first = first.next;
            } else {
                // Handle edge case: n is greater than the number of nodes
                return dummy.next;
            }
        }

        // Move both pointers until the first pointer reaches the end
        while (first != null) {
            first = first.next;
            second = second.next;
        }

        // Remove the nth node from the end
        if (second.next != null) {
            second.next = second.next.next;
        }

        return dummy.next;
    }
}

