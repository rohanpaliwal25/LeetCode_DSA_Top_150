https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/?envType=study-plan-v2&envId=top-interview-150

----------------------------------------------------------------------------------------------------------------------------------------------------------

Problem :- 

Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

 Example 1:


Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:


Input: head = [1,1,1,2,3]
Output: [2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution :-


class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        // Check if the linked list is empty or has only one node
        if (head == null || head.next == null)
            return head;

        // Create a dummy node to simplify edge cases
        ListNode dummy = new ListNode(0, head);
        ListNode prev = dummy; // prev will always point to the previous non-duplicate element
        ListNode current = head;

        // Traverse the linked list
        while (current != null) {
            // Check for duplicates with the next node
            if (current.next != null && current.val == current.next.val) {
                // Skip all consecutive duplicate nodes
                while (current.next != null && current.val == current.next.val) {
                    current = current.next;
                }
                // Update the next pointer of the previous node to the next non-duplicate element
                prev.next = current.next;
            } else {
                // Move the prev pointer to the next non-duplicate element
                prev = prev.next;
            }
            // Move to the next node in the linked list
            current = current.next;
        }

        // Return the modified linked list
        return dummy.next;
    }
}
