https://leetcode.com/problems/merge-k-sorted-lists/description/

Problem:-

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
 

Constraints:

k == lists.length
0 <= k <= 104
0 <= lists[i].length <= 500
-104 <= lists[i][j] <= 104
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 104.

----------------------------------------------------------

Solution :-

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int size = lists.length;
        if(size == 0) return null;
        if(size == 1) return lists[0];

        
        return mergeKListHelper(lists, 0, size - 1);
    }

    public ListNode mergeKListHelper(ListNode[] lists, int start, int end)
    {
        if(start == end) return lists[start];
        int mid = start + (end - start)/2;
        
        ListNode left = mergeKListHelper(lists, start, mid);
        ListNode right = mergeKListHelper(lists, mid+1, end);

        return mergeTwoLists(left, right);
    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if (list1 == null && list2 == null)
            return null;
        if (list1 == null)
            return list2;
        if (list2 == null)
            return list1;

        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (list1 != null && list2 != null) {

            if (list1.val <= list2.val) {
                ListNode temp = new ListNode(list1.val);
                current.next = temp;
                current = temp;
                list1 = list1.next;
            } else {
                ListNode temp = new ListNode(list2.val);
                current.next = temp;
                current = temp;
                list2 = list2.next;
            }
        }

        if (list1 != null)
            current.next = list1;
        if (list2 != null)
            current.next = list2;

        return dummy.next;
    }

}

-------------------------------------------

Time Complexity :-  O(N Log K)

Space :- O(N)
