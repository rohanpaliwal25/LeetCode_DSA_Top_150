https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Problem :-

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution :- 

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = {-1, -1};

        // First Binary Search for leftmost occurrence
        result[0] = binarySearch(nums, target, true);

        // Second Binary Search for rightmost occurrence
        result[1] = binarySearch(nums, target, false);

        return result;
    }

    private int binarySearch(int[] nums, int target, boolean findFirst) {
        int index = -1;
        int low = 0, high = nums.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                index = mid;

                if (findFirst) {
                    // Adjust high to find leftmost occurrence
                    high = mid - 1;
                } else {
                    // Adjust low to find rightmost occurrence
                    low = mid + 1;
                }
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return index;
    }
}
