https://leetcode.com/problems/search-a-2d-matrix/description/


You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Solution :-

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }

        int rows = matrix.length, cols = matrix[0].length;
        int top = 0, bottom = rows - 1;

        while (top <= bottom) {
            int row = top + (bottom - top) / 2;

            if (matrix[row][0] <= target && matrix[row][cols - 1] >= target) {
                // Perform binary search only if the target might be in this row
                return binarySearch(matrix[row], target);
            } else if (matrix[row][0] > target) {
                bottom = row - 1;
            } else {
                top = row + 1;
            }
        }

        return false;
    }

    private boolean binarySearch(int[] row, int target) {
        int low = 0, high = row.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (row[mid] == target) {
                return true;
            } else if (row[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;
    }
}
