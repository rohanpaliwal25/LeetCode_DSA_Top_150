https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/?envType=study-plan-v2&envId=top-interview-150

Problem:-

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Solution :- 

class Solution {
    public int findMin(int[] nums) {
        int low = 0, high = nums.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] < nums[high]) {
                // Right half is unsorted, minimum is in the left half
                high = mid; // Here mid element also be a mininmum element that's why we didn't set high = mid -1
            } else {
                // Left half is unsorted, minimum is in the right half
                low = mid + 1;
            }
        }

        // When the loop exits, 'low' is the index of the minimum element
        return nums[low];
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
