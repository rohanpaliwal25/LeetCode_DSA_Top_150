https://leetcode.com/problems/search-a-2d-matrix-ii/description/



Problem :-

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 
Example 1:

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true


Solution :-

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // Get the number of rows in the matrix
        int rows = matrix.length;
        // Check if the matrix is empty
        if (rows == 0) {
            return false;
        }

        // Get the number of columns in the matrix
        int cols = matrix[0].length;
        
        // Initialize pointers to the top-right corner of the matrix
        int row = 0;
        int col = cols - 1;

        // Perform the search while within the matrix bounds
        while (row < rows && col >= 0) {
            // Check if the current element is equal to the target
            if (matrix[row][col] == target) {
                return true; // Target found
            } else if (matrix[row][col] < target) {
                // If the current element is less than the target, move to the next row
                row++;
            } else {
                // If the current element is greater than the target, move to the previous column
                col--;
            }
        }

        // If the search goes out of bounds and the target is not found, return false
        return false;
    }
}
