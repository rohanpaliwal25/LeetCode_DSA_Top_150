
https://leetcode.com/problems/majority-element/description/

Problem:- 

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.


Solution:-

class Solution {
    public int majorityElement(int[] nums) {
        int freq = 1;
        int maj = nums[0];
        for(int i=1; i<nums.length; i++)
        {
            if(freq == 0){
                maj = nums[i];
                freq = 1;
            }
            else if(nums[i]!=maj)
            {
                freq--;
            }else{
                freq++;
            }
        }
        return maj;
    }
}


The given algorithm finds the majority element in an array efficiently using a constant space approach. It initializes a frequency variable and assumes the first element as the majority element. It iterates through the array, updating the majority element and frequency based on encounters with different elements. If the frequency becomes zero, it updates the majority element to the current element. If the current element is not equal to the majority element, it decrements the frequency; otherwise, it increments the frequency. Ultimately, the algorithm returns the majority element found in the array.




