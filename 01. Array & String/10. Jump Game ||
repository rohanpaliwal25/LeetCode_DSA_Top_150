https://leetcode.com/problems/jump-game-ii/description/?envType=study-plan-v2&envId=top-interview-150

Problem:- 

You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Solution :-

class Solution {
    public int jump(int[] nums) {
        int jumps = 0;
        int currentEnd = 0;
        int farthest = 0;

        // Iterate through the array, excluding the last element
        for (int i = 0; i < nums.length - 1; i++) {
            // Update the farthest index that can be reached
            farthest = Math.max(farthest, i + nums[i]);

            // If the current index reaches the currentEnd, make a jump
            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;

                // If the farthest index exceeds or equals the last index, no need to continue
                if (currentEnd >= nums.length - 1) {
                    break;
                }
            }
        }

        return jumps;
    }
}

***** Explanation :- 

Certainly! In the context of the "Jump Game II" algorithm, the term "boundary" refers to the range of indices that can be reached with the current number of jumps. Let's delve deeper into this concept with an analogy:

Imagine that you are standing at the starting point of the array, and you have a certain number of "jumps" you can make. The "boundary" represents the furthest index you can reach with your current jumps.

Here's how it works:

1. **Initialization:**
   - Initially, the boundary is set to the first index (where you start).
   - You have zero jumps initially.

2. **Iteration:**
   - As you iterate through the array, you update the "farthest reachable index" based on the current index and its value.
   - If the current index reaches or crosses the current boundary, you consider making a jump.
   - After making a jump, you update the boundary to the new "farthest reachable index."

3. **Example:**
   - Let's consider the example array `nums = [2, 3, 1, 1, 4]`.
   - Initially, the boundary is at index 0.
   - When you make the first jump, the boundary extends to the farthest reachable index after the jump.
   - Subsequent jumps may extend the boundary further, covering more indices.

4. **Purpose:**
   - The boundary helps you keep track of the range of indices you can reach with the current number of jumps.
   - Making a jump means updating the boundary to the new farthest reachable index.

In the algorithm, the `currentEnd` variable is used to represent this boundary. The algorithm keeps track of the farthest reachable index (`farthest`) and updates the `currentEnd` when the current index reaches or crosses the current boundary. This way, the algorithm efficiently determines the minimum number of jumps required to reach the end of the array.

In summary, the "boundary" is a conceptual representation of the reachable indices with the current number of jumps, and updating it ensures that the algorithm progresses optimally towards the end of the array.
