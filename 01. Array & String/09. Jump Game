

Problem:-

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.

------------------------------------------------------------------------------------------------------------------------------------------
Solution:- 1

class Solution {
    public boolean canJump(int[] nums) {
        int maxReach = 0;

        // Iterate through the array
        for (int i = 0; i < nums.length; i++) {
            // If the current index is not reachable, return false
            if (i > maxReach) {
                return false;
            }

            // Update the maximum reachable index
            maxReach = Math.max(maxReach, i + nums[i]);

            // If the last index is reachable, return true
            if (maxReach >= nums.length - 1) {
                return true;
            }
        }

        return false;
    }
}

Explanation:-

Certainly! The "Jump Game" problem can be efficiently solved using a greedy approach. Here's the Java code using a greedy strategy:

```java
class Solution {
    public boolean canJump(int[] nums) {
        int maxReach = 0;

        // Iterate through the array
        for (int i = 0; i < nums.length; i++) {
            // If the current index is not reachable, return false
            if (i > maxReach) {
                return false;
            }

            // Update the maximum reachable index
            maxReach = Math.max(maxReach, i + nums[i]);

            // If the last index is reachable, return true
            if (maxReach >= nums.length - 1) {
                return true;
            }
        }

        return false;
    }
}
```

**Greedy Approach Explanation:**

The greedy strategy is based on making the locally optimal choice at each step. In this case, we maintain a variable `maxReach` to represent the furthest index that can be reached from the current position. While iterating through the array, at each step, we update `maxReach` to be the maximum of its current value and the sum of the current index and the value at that index (`i + nums[i]`).

The key idea is to always choose the index that provides the furthest reachability. If at any point the current index is greater than `maxReach`, it means that index is not reachable, and the algorithm returns `false`. If the loop completes without returning `false`, it means the last index is reachable, and the algorithm returns `true`.

This greedy approach ensures that the algorithm considers the most optimal jumps at each step, leading to an efficient solution with a time complexity of O(n), where n is the length of the input array.

 
---------------------------------------------------------------

Solution 2 :-  (Faster)

class Solution {
    public boolean canJump(int[] nums) {
        int finalPos = nums.length-1;

        for(int i=nums.length-2; i>=0; --i)
        {
            if(i+nums[i] >= finalPos)
                finalPos = i;
        }

        return finalPos==0;
    }
}


