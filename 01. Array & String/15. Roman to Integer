https://leetcode.com/problems/roman-to-integer/description/?envType=study-plan-v2&envId=top-interview-150

Problem:-

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

Solution:-

class Solution {
    public int romanToInt(String s) {
        // Create a HashMap to store the values of Roman numerals
        HashMap<Character, Integer> romanValues = new HashMap<>();
        romanValues.put('I', 1);
        romanValues.put('V', 5);
        romanValues.put('X', 10);
        romanValues.put('L', 50);
        romanValues.put('C', 100);
        romanValues.put('D', 500);
        romanValues.put('M', 1000);

        int result = 0;

        // Iterate through the characters of the Roman numeral
        for (int i = 0; i < s.length(); i++) {
            // Get the value of the current character
            int currentValue = romanValues.get(s.charAt(i));

            // Check for subtraction cases
            if (i < s.length() - 1 && romanValues.get(s.charAt(i + 1)) > currentValue) {
                // If the next character has a greater value, subtract the current value
                result -= currentValue;
            } else {
                // Otherwise, add the current value
                result += currentValue;
            }
        }

        return result;
    }
}



Certainly! To convert a Roman numeral to an integer, we can iterate through the characters of the Roman numeral, adding their corresponding values to the result. However, since there are cases where subtraction is used, we need to check for those instances. Here's the Java code along with explanations:

```java
class Solution {
    public int romanToInt(String s) {
        // Create a HashMap to store the values of Roman numerals
        HashMap<Character, Integer> romanValues = new HashMap<>();
        romanValues.put('I', 1);
        romanValues.put('V', 5);
        romanValues.put('X', 10);
        romanValues.put('L', 50);
        romanValues.put('C', 100);
        romanValues.put('D', 500);
        romanValues.put('M', 1000);

        int result = 0;

        // Iterate through the characters of the Roman numeral
        for (int i = 0; i < s.length(); i++) {
            // Get the value of the current character
            int currentValue = romanValues.get(s.charAt(i));

            // Check for subtraction cases
            if (i < s.length() - 1 && romanValues.get(s.charAt(i + 1)) > currentValue) {
                // If the next character has a greater value, subtract the current value
                result -= currentValue;
            } else {
                // Otherwise, add the current value
                result += currentValue;
            }
        }

        return result;
    }
}
```

**Explanation:**

1. **HashMap for Roman Values:**
   - Create a `HashMap` named `romanValues` to store the values of Roman numerals.

2. **Iteration through Roman Numeral:**
   - Iterate through each character of the Roman numeral string.

3. **Checking for Subtraction Cases:**
   - For each character, get its corresponding value from the `romanValues` map.
   - Check if the next character (if exists) has a greater value.
   - If so, subtract the current value; otherwise, add the current value to the result.

4. **Result:**
   - The final result is the sum of the values obtained in the iteration.

**Illustration:**

Consider the Roman numeral "XXVII":

- Initialize `result` to 0.
- For the first character 'X', add its value (10) to `result`.
- For the second character 'X', add its value (10) to `result`.
- For the third character 'V', add its value (5) to `result`.
- For the fourth character 'I', add its value (1) to `result`.
- The final result is 10 + 10 + 5 + 1 = 26.

This implementation efficiently converts a Roman numeral to an integer using the specified rules.
