https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/?envType=study-plan-v2&envId=top-interview-150

--------------------------------------------------------------------------------------------------------------------------------------
Problem :-

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

-----------------------------------------------------------------------------------------------------------------------------------------

Solution :-

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        // Check if the tree is empty
        if(root == null) {
            return new ArrayList<>(); // Return an empty list if the tree is empty
        }

        Deque<TreeNode> q = new ArrayDeque<>(); // Use a deque for level order traversal
        q.add(root); // Enqueue the root node to start traversal

        List<List<Integer>> res = new ArrayList<>(); // List to store the final result
        int level = 0; // Variable to track the current level

        while(!q.isEmpty()) {
            int size = q.size(); // Number of nodes at the current level
            List<Integer> temp  = new ArrayList<>(); // List to store nodes at the current level

            for(int i = 0; i < size; ++i) {
                TreeNode current = q.poll(); // Dequeue the current node

                // Add the node value to the temp list based on the zigzag pattern
                if(level % 2 == 0) {
                    temp.add(current.val); // Add to the end of the list for even levels
                } else {
                    temp.add(0, current.val); // Add to the beginning of the list for odd levels
                }

                // Enqueue the left and right children
                if(current.left != null) {
                    q.add(current.left);
                }
                if(current.right != null) {
                    q.add(current.right);
                }
            }
            level++; // Move to the next level
            res.add(temp); // Add the temp list to the final result
        }
        return res; // Return the zigzag level order traversal of the binary tree
    }
}

