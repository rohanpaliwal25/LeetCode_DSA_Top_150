https://leetcode.com/problems/find-bottom-left-tree-value/description/?envType=daily-question&envId=2024-02-28

Problem:-

Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:


Input: root = [2,1,3]
Output: 1
Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

---------------------------------------------------------------------------------------------------------------------------

Solution :-

class Solution {
    public int findBottomLeftValue(TreeNode root) {

        Queue<TreeNode> store = new LinkedList<>();
        store.add(root);
        TreeNode t = new TreeNode();
        while(!store.isEmpty())
        {
            for(int i = 0; i < store.size(); i++)
            {
                t = store.poll();
                if(t.right != null) store.add(t.right);
                if(t.left != null) store .add(t.left);
            }
        }
        return t == null ? -1 : t.val;
    }
}


** Note :- Trick here is to perform 'Level Order Traversal but not left to right instead perform Right to left' scan so last node visited be leftmost value of tree always.
