https://leetcode.com/problems/container-with-most-water/description/?envType=study-plan-v2&envId=top-interview-150


You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.


class Solution {
    public int maxArea(int[] height) {
        int i=0, j=height.length-1;
        int totalWater = 0;
        while(i<j)
        {
            totalWater = Math.max(Math.min(height[i], height[j])*(j-i), totalWater);
            if(height[i]<height[j])
                i++;
            else j--;
        }
    return totalWater;
    }
}


Certainly! Here are concise steps for quick revision:

1. **Goal:** Find the pair of lines that form the widest container.
2. **Initialize:** Set pointers at the beginning and end of the array.
3. **Calculate Initial Trapped Water:** Use the initial width and minimum height.
4. **Update Maximum:** Set initial trapped water as the maximum.
5. **Move Inward:** Iterate with pointers moving inward, updating width and trapped water.
6. **Repeat Until Pointers Meet:** Continue until the pointers meet.
7. **Final Result:** Maximum trapped water is the solution.
8. **Time Complexity:** O(n) for one-pass traversal.
9. **Review Code:** Ensure proper handling of edge cases.
10. **Practice:** Reinforce understanding with similar problems.
